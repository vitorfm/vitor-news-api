#!/bin/bash

set -e  # encerra em caso de erro

echo "🔄 Esperando o banco de dados iniciar..."
sleep 5

echo "🚀 Aplicando migrações..."
python manage.py migrate --noinput

echo "📦 Coletando arquivos estáticos..."
python manage.py collectstatic --noinput

echo "👥 Criando usuários iniciais..."
python manage.py shell << END
from django.contrib.auth.models import User, Group

admin_user, created = User.objects.get_or_create(username='admin', defaults={'email': 'admin@example.com'})
if created:
    admin_user.set_password('admin123')
    admin_user.is_superuser = True
    admin_user.is_staff = True
    admin_user.save()

editor_group, _ = Group.objects.get_or_create(name='Editor')
leitor_group, _ = Group.objects.get_or_create(name='Leitor')

editor_user, created = User.objects.get_or_create(username='editor', defaults={'email': 'editor@example.com'})
if created:
    editor_user.set_password('editor123')
    editor_user.save()
    editor_user.groups.add(editor_group)

reader_user, created = User.objects.get_or_create(username='leitor_info', defaults={'email': 'reader@example.com'})
if created:
    reader_user.set_password('info123')
    reader_user.save()
    reader_user.groups.add(leitor_group)

reader_user_pro, created = User.objects.get_or_create(username='leitor_pro', defaults={'email': 'reader@example.com'})
if created:
    reader_user_pro.set_password('pro123')
    reader_user_pro.save()
    reader_user_pro.groups.add(leitor_group)

print("✅ Usuários criados: admin/admin123, editor/editor123, leitor_info/info123, leitor_pro/pro123")
END

echo "🏷️ Populando categorias..."
python scripts/seed_categories.py

echo "📰 Populando notícias..."
python scripts/seed_news.py

echo "🟢 Iniciando o servidor..."
exec gunicorn vitor_news.wsgi:application --bind 0.0.0.0:8000

echo "🟢 Iniciando o servidor..."
exec gunicorn vitor_news.wsgi:application --bind 0.0.0.0:8000
